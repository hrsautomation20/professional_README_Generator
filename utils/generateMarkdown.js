// TODO: Create a function that returns a license badge based on which license is passed in
// If there is no license, return an empty string
// Credit:- https://gist.github.com/lukas-h/2a5d00690736b4c3a7ba
function generateMarkdown(license) {
  let licenseBadges = [
    "- free license",
    "[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)",
    "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)",
    "[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)",
    "[![License](https://img.shields.io/badge/License-Boost%201.0-lightblue.svg)](https://www.boost.org/LICENSE_1_0.txt)",
    "[![License: CC0-1.0](https://img.shields.io/badge/License-CC0%201.0-lightgrey.svg)](http://creativecommons.org/publicdomain/zero/1.0/)",
    "[![License: Unlicense](https://img.shields.io/badge/license-Unlicense-blue.svg)](http://unlicense.org/)",
  ];

  let sectionsText = "";
  let readmeText = "";

  for (sections of license.contents) {
    switch (sections) {
      case "screenshot":
        sectionsText = `\r\n### Screenshot\r![Demo Screenshot 1](${license.imageSrc})\r`;
        break;
      case "contents":
        license.contents.forEach((element, i) => {
          sectionsText += `\r${i + 1}. [${element.capitalize()}](#${element})`;
        });
        sectionsText = `\r## Contents\r${sectionsText}\n`;
        break;
      case "installation":
        sectionsText = `\r\n## ${sections.capitalize()}\n\r${
          license.install
        } \rApplication can be accessed at [${license.website}](${
          license.website
        })\r`;
        break;
      case "usage":
        sectionsText = `\r\n## ${sections.capitalize()}\n\r${
          license.usage
        }  \rAll app code is available at repository [${license.repo}](${
          license.repo
        })\r`;
        break;
      case "license":
        sectionsText = `\r\n## ${sections.capitalize()}\n\rLicensed under the ${
          licenseBadges[license.license]
        }\r`;
        break;
      case "contributing":
        sectionsText = `\r\n## ${sections.capitalize()}\n\rSee contribution guidlines below:  \r${
          license.contributing
        }\r`;
        break;
      case "testing":
        sectionsText = `\r\n## ${sections.capitalize()}\n\rFor testing follow guidlines below:  \r${
          license.testing
        }\r`;
        break;
      case "questions":
        sectionsText = `\r\n## ${sections.capitalize()}\n\rFor any questions use contacts below:  \r
        Developer: ${license.developer}  
        Email: [${license.email}](mailto:${license.email})  
        GitHub: [https://github.com/${license.githubuser}](https://github.com/${
          license.githubuser
        })`;
        break;
    }
    readmeText += sectionsText;
    sectionsText = "";
  }
  return `# ${license.title} ${licenseBadges[license.license]}\n
  ${license.description}
  ${readmeText}
  
  *Generated by [readme-generator]*`;
}
String.prototype.capitalize = function () {
  return this.charAt(0).toUpperCase() + this.slice(1);
};
// TODO: Create a function that returns the license link
// If there is no license, return an empty string
// function renderLicenseLink(license) {}

// TODO: Create a function that returns the license section of README
// If there is no license, return an empty string
// function renderLicenseSection(license) {}

// TODO: Create a function to generate markdown for README
// function generateMarkdown(data) {
//   return `# ${data.title}

// `;
// }

module.exports = generateMarkdown;
